buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://xbib.org/repository'
        }
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:7.6.2"
    }
}

import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "org.xbib.gradle.plugin.jflex" version "1.2.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.5.6.0.1"
}

printf "Date: %s\nHost: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME),
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        gradle.gradleVersion, GroovySystem.getVersion(), JavaVersion.current()

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'org.xbib.gradle.plugin.jflex'
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

esplugin {
    description 'Plugin bundle for Elasticsearch'
    name 'elasticsearch-plugin-bundle'
    classname 'org.xbib.elasticsearch.plugin.bundle.BundlePlugin'
}
licenseFile = rootProject.file('LICENSE.txt')
noticeFile = rootProject.file('NOTICE.txt')

configurations {
    wagon
}

dependencies {
    compile "com.ibm.icu:icu4j:${project.property('icu4j.version')}"
    compile "org.xbib:standardnumber:${project.property('standardnumber.version')}"
    compile "org.codelibs.elasticsearch.module:analysis-common:${project.property('elasticsearch.version')}"
    testCompile "org.elasticsearch:elasticsearch:${project.property('elasticsearch.version')}"
    testCompile "org.elasticsearch.plugin:transport-netty4-client:${project.property('elasticsearch.version')}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}

compileJava {
}

compileTestJava {
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    manifest {
        attributes(
                'Implementation-Title': "${project.group}#${project.name};${project.version}",
                'Implementation-Version': version,
                'Implementation-Vendor': "xbib",
                'Build-Date': ZonedDateTime.now(ZoneOffset.UTC),
                'Build-Java-Version': System.getProperty("java.version"),
                'X-Compile-Source-JDK': compileJava.targetCompatibility,
                'X-Compile-Target-JDK': compileJava.sourceCompatibility,
                'X-Compile-Elasticsearch-Version': version,
                'X-Compile-Lucene-Version': project.property('lucene.version'),
                'X-Compile-Elasticsearch-Snapshot': false
        )
    }
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_12
        targetCompatibility = JavaVersion.VERSION_12
        options.compilerArgs << "-Xlint:none,-fallthrough" << "-Xdoclint:none"
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

test {
    enabled = true
}

integTest {
    enabled = true
}

clean {
    delete fileTree('.') { include '.local*.log' }
}

artifacts {
    archives sourcesJar, javadocJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/ext.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/sourcequality.gradle'

asciidoctor {
    attributes toc: 'left',
            doctype: 'book',
            icons: 'font',
            encoding: 'utf-8',
            sectlink: true,
            sectanchors: true,
            linkattrs: true,
            imagesdir: 'img',
            'source-highlighter': 'coderay'
}

checkstyleMain.source = 'src/main/java'

// Java 11: Method not found while parsing signature: java.lang.Thread#stop(java.lang.Throwable)
forbiddenApisMain.enabled = false
forbiddenApisTest.enabled = false

forbiddenPatterns.exclude('**/*.txt','**/*.brk','**/*.nrm','**/*.fst','**/*.tree')

licenseHeaders.enabled = false

dependencyLicenses.enabled = false

thirdPartyAudit.enabled = false

testingConventions.enabled = false
